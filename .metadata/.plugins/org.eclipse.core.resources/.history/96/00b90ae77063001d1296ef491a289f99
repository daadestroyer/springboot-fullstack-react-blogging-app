package com.daadestroyer.springbootfullstackreactbloggingapp.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.daadestroyer.springbootfullstackreactbloggingapp.dto.CategoryDto;
import com.daadestroyer.springbootfullstackreactbloggingapp.dto.PostDto;
import com.daadestroyer.springbootfullstackreactbloggingapp.dto.UserDto;
import com.daadestroyer.springbootfullstackreactbloggingapp.exception.ResourceNotFoundException;
import com.daadestroyer.springbootfullstackreactbloggingapp.model.Category;
import com.daadestroyer.springbootfullstackreactbloggingapp.model.Post;
import com.daadestroyer.springbootfullstackreactbloggingapp.model.User;
import com.daadestroyer.springbootfullstackreactbloggingapp.repo.CategoryRepo;
import com.daadestroyer.springbootfullstackreactbloggingapp.repo.PostRepo;
import com.daadestroyer.springbootfullstackreactbloggingapp.repo.UserRepo;
import com.daadestroyer.springbootfullstackreactbloggingapp.service.PostService;

import net.bytebuddy.asm.Advice.This;

@Service
public class PostServiceImpl implements PostService {

	@Autowired
	private PostRepo postRepo;
	@Autowired
	private ModelMapper modelMapper;
	@Autowired
	private UserRepo userRepo;
	@Autowired
	private CategoryRepo categoryRepo;

	@Override
	public PostDto createPost(PostDto postDto, int userId, int categoryId) {
		User savedUser = this.userRepo.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User", "Id", userId));

		Category savedCategory = this.categoryRepo.findById(categoryId)
				.orElseThrow(() -> new ResourceNotFoundException("Category", "Id", categoryId));

		postDto.setImageName("default.png");
		postDto.setUser(this.modelMapper.map(savedUser, UserDto.class));

		postDto.setCategory(this.modelMapper.map(savedCategory, CategoryDto.class));

		Post post = this.postRepo.save(this.modelMapper.map(postDto, Post.class));

		return this.modelMapper.map(post, PostDto.class);

	}

	@Override
	public PostDto updatePost(PostDto postDto, int postId) {
		// Post savedPost = this.postRepo.findById(postId)
		// .orElseThrow(() -> new ResourceNotFoundException("Post", "Id", postId));

		return null;
	}

	@Override
	public PostDto getPost(int postId) {
		Post post = this.postRepo.findById(postId)
				.orElseThrow(() -> new ResourceNotFoundException("Post", "Id", postId));
		return this.modelMapper.map(post, PostDto.class);
	}

	@Override
	public List<PostDto> getAllPost() {
		List<PostDto> listOfPost = this.postRepo.findAll().stream()
				.map(post -> this.modelMapper.map(post, PostDto.class)).collect(Collectors.toList());
		return listOfPost;
	}

	@Override
	public String deletePost(int postId) {
		Post post = this.postRepo.findById(postId)
				.orElseThrow(() -> new ResourceNotFoundException("Post", "Id", postId));
		this.postRepo.delete(post);
		return "Post " + postId + " is deleted....";
	}

	@Override
	public List<PostDto> getPostByCategoryId(int catId) {
		Category savedCategory = this.categoryRepo.findById(catId)
				.orElseThrow(() -> new ResourceNotFoundException("Category", "Id", catId));

		List<PostDto> postByCategory = this.postRepo.findByCategory(savedCategory).stream()
				.map(post -> this.modelMapper.map(post, PostDto.class)).collect(Collectors.toList());

		return postByCategory;
	}

	@Override
	public List<PostDto> getPostByUserId(int userId) {
		User savedUser = this.userRepo.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User", "Id", userId));

		List<PostDto> postByUser = this.postRepo.findByUser(savedUser).stream()
				.map(post -> this.modelMapper.map(post, PostDto.class)).collect(Collectors.toList());

		return postByUser;
	}

	@Override
	public List<PostDto> searchPost(String keyword) {
		// TODO Auto-generated method stub
		return null;
	}

}
