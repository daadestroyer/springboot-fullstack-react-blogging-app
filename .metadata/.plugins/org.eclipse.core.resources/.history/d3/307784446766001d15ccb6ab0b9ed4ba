package com.daadestroyer.springbootfullstackreactbloggingapp.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.daadestroyer.springbootfullstackreactbloggingapp.dto.JwtAuthRequest;
import com.daadestroyer.springbootfullstackreactbloggingapp.service.impl.CustomUserDetailService;
import com.daadestroyer.springbootfullstackreactbloggingapp.util.JwtUtil;

@RestController
@RequestMapping("/token")
public class JwtController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private AuthenticationManager authenticationManager;

	@PostMapping("/login")
	public ResponseEntity<?> createToken(@RequestBody JwtAuthRequest jwtAuthRequest) throws Exception {
		// this line will validate the username and password if authentication is
		// success then we can generate token
		try {
			this.authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
					jwtAuthRequest.getUsername(), jwtAuthRequest.getPassword()));

		}
		catch (Exception e) {
			throw new Exception("invalid username/password");
		}

		// if there is no exception just generate the token
		String generateToken = this.jwtUtil.generateToken(jwtAuthRequest.getUsername());

		return new ResponseEntity<>(generateToken, HttpStatus.OK);
	}
}
